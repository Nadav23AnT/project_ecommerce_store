{"id":"4e27666c-5d49-4660-97d4-c5377f5d9e9c","name":"Dev: dashboards dev","values":[{"key":"URL","value":"http://127.0.0.1:5000/api","enabled":true,"type":"default"},{"key":"token","value":"","enabled":true,"type":"any"},{"key":"csrfToken","value":"\"\"","enabled":true,"type":"default"},{"key":"dataTableVisualizerScript","value":"if (pm.request.method === 'GET') {\n  let rowsData = pm.response.json().data;\n  // for 1 result convert object data to array of 1 object\n  if(!Array.isArray(rowsData)) {\n    rowsData = [rowsData]\n  }\n  let keys = Object.keys(rowsData[0] || rowsData);\n  keys = keys.filter(key => key !== \"_id\" && key !== \"__v\");\n  let tableHeader = '<tr>', tableRows = '';\n  for (let i = 0; i < keys.length; i++) {\n    tableHeader += `<th>${keys[i]}</th>`;\n  }\n  tableHeader += '</tr>';\n  for (let i = 0; i < rowsData.length; i++) {\n    tableRows += '<tr>';\n    for (let k = 0; k < keys.length; k++) {\n      tableRows += `<td>${rowsData[i]?.[keys[k]]}</td>`;\n    }\n    tableRows += '</tr>';\n  }\n  const template = `\n    <html>\n    <head>\n        <style type=\"text/css\">\n            .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\n            .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\n            .tftable tr {background-color:#ffffff;}\n            .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\n            .tftable tr:hover {background-color:#e0ffff;}\n        </style>\n    </head>\n      <body>\n      <table class=\"tftable\" border=\"1\">\n          ${tableHeader}\n          ${tableRows}\n        </table>\n      </body>\n    </html>\n    <script>\n      $(document).ready( function () {\n        \n      });\n    </script>`;\n  // Set visualizer\n  pm.visualizer.set(template, {\n      // Pass the response body parsed as JSON as `data`\n      rowsData,\n      tableHeader,\n      tableRows\n  });\n}","enabled":true,"type":"default"},{"key":"prePostRequestAddCsrfHeader","value":"if (pm.request.method === 'POST' || pm.request.method === 'PATCH') {\n  pm.request.headers.add({key: 'X-CSRF-Token', value: pm.environment.get(\"csrfToken\") });\n}","enabled":true,"type":"default"}]}